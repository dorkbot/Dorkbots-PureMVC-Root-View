package app.project_mvc.view{	import app.project_mvc.notifications.Notifications;	import app.project_mvc.view.mediators.FirstMediator;	import app.project_mvc.view.mediators.SecondMediator;	import app.project_mvc.view.mediators.ThirdMediator;		import dorkbots.dorkbots_view.IViewComponent;	import dorkbots.dorkbots_view.IViewComposite;		import org.puremvc.as3.multicore.interfaces.IMediator;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;
		public class ApplicationMediator extends Mediator implements IMediator	{		public static const NAME:String = "ApplicationMediator";				private var rootView:IViewComposite;				public function ApplicationMediator(viewComponent:IViewComponent):void		{			super( NAME, viewComponent );						rootView = IViewComposite(viewComponent);		}				override public function listNotificationInterests():Array		{				return [				Notifications.FIRST_VIEW_DISPLAY,				Notifications.FIRST_VIEW_DISPOSE,				Notifications.SECOND_VIEW_DISPLAY,				Notifications.SECOND_VIEW_DISPOSE,				Notifications.THIRD_VIEW_DISPLAY,				Notifications.THIRD_VIEW_DISPOSE,				Notifications.EXAMPLE_CHILD_APP_DISPLAY,				Notifications.EXAMPLE_CHILD_APP_DISPOSE			];		}				override public function handleNotification( notification:INotification ):void		{				var name:String = notification.getName();			var body:Object = notification.getBody();						// have to update root view first			rootView.updateView( name, notification );						switch ( name )			{					case Notifications.FIRST_VIEW_DISPLAY:					facade.registerMediator( new FirstMediator( ViewNames.FIRST_VIEW, rootView.getComponentView( ViewNames.FIRST_VIEW ) ) );					break;								case Notifications.FIRST_VIEW_DISPOSE:					facade.removeMediator( ViewNames.FIRST_VIEW );					break;								case Notifications.SECOND_VIEW_DISPLAY:					facade.registerMediator( new SecondMediator( ViewNames.SECOND_VIEW, rootView.getComponentView( ViewNames.SECOND_VIEW ) ) );					break;								case Notifications.SECOND_VIEW_DISPOSE:					facade.removeMediator( ViewNames.SECOND_VIEW );					break;								case Notifications.THIRD_VIEW_DISPLAY:					facade.registerMediator( new ThirdMediator( ViewNames.THIRD_VIEW, rootView.getComponentView( ViewNames.THIRD_VIEW ) ) );					break;								case Notifications.THIRD_VIEW_DISPOSE:					facade.removeMediator( ViewNames.THIRD_VIEW );					break;			}		}	}}