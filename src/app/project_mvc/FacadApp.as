package app.project_mvc{	import flash.display.DisplayObjectContainer;		import app.project_mvc.controller.startup.StartupCommand;	import app.project_mvc.notifications.Notifications;	import app.project_mvc.notifications.notification_objects.StartupNotification;	import app.project_mvc.view.ApplicationRootView;		import org.puremvc.as3.multicore.interfaces.IFacade;	import org.puremvc.as3.multicore.interfaces.IMediator;	import org.puremvc.as3.multicore.patterns.facade.Facade;
		public class FacadApp extends Facade implements IFacade	{		public static const NAME:String = "FacadApp";				public final function FacadApp():void		{			super(NAME);		}				public static function getInstance():FacadApp		{			if (instanceMap[NAME] == null)			{				instanceMap[NAME] = new FacadApp();			}						return instanceMap[NAME] as FacadApp;		}				override public function removeMediator(mediatorName:String):IMediator		{			return super.removeMediator(mediatorName);		}				override protected function initializeController():void		{			super.initializeController();						registerCommand( Notifications.STARTUP, StartupCommand );		}				public function startup(stage:DisplayObjectContainer, relativePath:String):void		{			var startupVO:StartupNotification = new StartupNotification( new ApplicationRootView( stage ), relativePath );			sendNotification( Notifications.STARTUP, startupVO );		}				override public function sendNotification(notificationName:String, body:Object = null, type:String = null):void		{			//trace("[" + NAME + "] sendNotification -> notificationName = " + notificationName );			super.sendNotification(notificationName, body, type);		}	}}